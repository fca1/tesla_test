/*
 * BasicTest.java - Copyright(c) 2013 Joe Pasqua
 * Provided under the MIT License. See the LICENSE file for details.
 * Created: Jul 5, 2013
 */

package org.noroomattheinn.tesla.test;

import java.util.List;
import java.util.logging.Level;
import org.noroomattheinn.tesla.ChargeState;
import org.noroomattheinn.tesla.VehicleState;
import org.noroomattheinn.tesla.DriveState;
import org.noroomattheinn.tesla.GUIState;
import org.noroomattheinn.tesla.HVACState;
import org.noroomattheinn.tesla.Result;
import org.noroomattheinn.tesla.StreamState;
import org.noroomattheinn.tesla.Streamer;
import org.noroomattheinn.tesla.Tesla;
import org.noroomattheinn.tesla.Vehicle;
//import org.noroomattheinn.utils.Utils;

/**
 * BasicTest
 *
 * @author Joe Pasqua <joe at NoRoomAtTheInn dot org>
 */

public class HornTest {
	Vehicle	currentVehicle;
	
	public HornTest(Vehicle	currentVehicle)
	{
	this.currentVehicle = currentVehicle;	
	}
	
	public double getTemperatureCInside() throws Exception
		{
        HVACState hvac = currentVehicle.queryHVAC();
        if (hvac.valid)
        	{
        	double t = hvac.driverTemp+hvac.passengerTemp;
        	t/=2.0;
        	return t;
        	}
        throw new Exception("Impossible de lire la temperature");
		}
	public void enableAc(boolean enable, double temp)
	{
		if (enable)
			{
			currentVehicle.setTempC(temp, temp);
			currentVehicle.startAC();
			}
		else
			{
			currentVehicle.stopAC();
			}
	
	}

     /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {            
        Tesla t = new Tesla();
                
        if (args.length == 2) {
            if (!t.connect(args[0], args[1])) {
                System.err.println("Unable to connect with supplied u/p");
                System.exit(1);
            }
        } else if (args.length == 3) {  // -t username token
            if (!t.connectWithToken(args[0], args[1])) {
                System.err.println("Unable to connect with stored credentials");
                System.exit(1);
            }
        }
        
        
        List<Vehicle> vehicles = t.getVehicles();
        
        HornTest h= new HornTest(vehicles.get(0));
        double t = h.getTemperatureCInside();
        if (t<16.0)
        	{
        	}
        
        for (Vehicle vehicle : vehicles) {
            VehicleState vs = vehicle.queryVehicle();
            //vehicle.honk();
            boolean sleep = vehicle.isAsleep();
            if (sleep)
            	{
            	Result te = vehicle.wakeUp();
            	}
            
            
            HVACState hvac = vehicle.queryHVAC();
            
            
            
            ChargeState cst  = vehicle.queryCharge();
            if (hvac.valid && cst.valid)
            	{
            	double inSideTemp = hvac.insideTemp;
//            	if (inSideTemp<17.0)
            		{
            		vehicle.setTempC(30.0, 30.0);
            		vehicle.startAC();
            		hvac = vehicle.queryHVAC();
                	double outSideTemp = hvac.outsideTemp;
            		vehicle.setTempC(0, 0);
            		vehicle.stopAC();
            		
            		}
            	}
            	
            	double percentBat = cst.batteryPercent;
            	boolean autorizedToHeat = cst.notEnoughPowerToHeat;
            
        }
        
    }
   
}
